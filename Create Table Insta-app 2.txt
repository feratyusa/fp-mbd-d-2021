-- TABLE USER
DROP TABLE IF EXISTS instagram.user;
 
CREATE TABLE instagram.user(
        user_id int PRIMARY KEY,
        user_username VARCHAR(50) UNIQUE,
        user_email VARCHAR(100) UNIQUE,
        user_pass varchar(50) NOT NULL,
        user_name varchar(100) NOT NULL,
        user_ip varchar(100),
        user_total_follower int DEFAULT 0 CHECK(user_total_follower >= 0),
        user_total_following int DEFAULT 0 CHECK(user_total_following >= 0),
        date_created timestamp DEFAULT current_timestamp,
        date_updated timestamp DEFAULT current_timestamp
);


-- TABLE ARCHIVE
DROP TABLE IF EXISTS instagram.archive;
 
CREATE TABLE instagram.archive(
        arcs_id int PRIMARY KEY,
        user_id int REFERENCES instagram.user(user_id),
        arcs_path VARCHAR(200) NOT NULL,
        arcs_total_size integer DEFAULT 0  CHECK(arcs_total_size >= 0),
        date_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        date_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);




-- TABLE USER FOLLOWING
DROP TABLE IF EXISTS instagram.user_following;
 
CREATE TABLE instagram.user_following(
        ufing_id int PRIMARY KEY,
        user_id int REFERENCES instagram.user(user_id),
        following_id int
);


-- TABLE USER FOLLOWERS
DROP TABLE IF EXISTS instagram.user_followers;
 
CREATE TABLE instagram.user_followers(
        ufer_id int PRIMARY KEY,
        user_id int REFERENCES instagram.user(user_id),
        follower_id int
);


-- TABLE POST
DROP TABLE IF EXISTS instagram.post;
 
CREATE TABLE instagram.post(
        post_id int PRIMARY KEY,
        user_id int REFERENCES instagram.user(user_id),
        post_jenis CHAR(5) CHECK (post_jenis = 'Photo' OR post_jenis = 'Video'),
        post_caption VARCHAR(1024),
        post_latitude float NOT NULL,
        post_longtitude float NOT NULL,
        post_path VARCHAR(200) NOT NULL,
        post_size integer CHECK(post_size > 0),
        post_total_like integer DEFAULT 0,
        post_total_comment integer DEFAULT 0,
        date_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        date_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- TABLE LIKES
DROP TABLE IF EXISTS instagram.likes;
 
CREATE TABLE instagram.likes(
        post_id int REFERENCES instagram.post(post_id),
        user_id int REFERENCES instagram.user(user_id),
        date_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- TABLE COMMENT
DROP TABLE IF EXISTS instagram.comments;
 
CREATE TABLE instagram.comments(
        com_id int PRIMARY KEY,
        user_id int REFERENCES instagram.user(user_id),
        post_id int REFERENCES instagram.post(post_id),
        com_text varchar(200) NOT NULL,
        date_created timestamp DEFAULT current_timestamp,
        date_updated timestamp DEFAULT current_timestamp
);


-- TABLE TAGS
DROP TABLE IF EXISTS instagram.tags;
 
CREATE TABLE instagram.tags(
        tag_id int PRIMARY KEY,
        user_id int REFERENCES instagram.user(user_id),
        date_created timestamp DEFAULT current_timestamp
);


-- TABLE HASHTAGS
DROP TABLE IF EXISTS instagram.hashtags;
 
CREATE TABLE instagram.hashtags(
        hashtag_id int PRIMARY KEY,
        hashtag_name VARCHAR(50) UNIQUE,
        date_created timestamp DEFAULT current_timestamp
);


-- TABLE STORY
DROP TABLE IF EXISTS instagram.story;
 
CREATE TABLE instagram.story(
        story_id int PRIMARY KEY,
        user_id int REFERENCES instagram.user(user_id),
        story_jenis CHAR(5) CHECK (story_jenis = 'Photo' OR story_jenis = 'Video'),
        story_caption VARCHAR(200),
        story_path VARCHAR(200) NOT NULL,
        story_size integer CHECK(story_size > 0),
        date_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        date_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- TABLE DETAIL ARCHIVE STORY
DROP TABLE IF EXISTS instagram.detail_archive_story;
 
CREATE TABLE instagram.detail_archive_story(
        story_id int REFERENCES instagram.story(story_id),
        arcs_id int REFERENCES instagram.archive(arcs_id),
        date_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- TABLE DETAIL ARCHIVE POST
DROP TABLE IF EXISTS instagram.detail_archive_post;
 
CREATE TABLE instagram.detail_archive_post(
        post_id int REFERENCES instagram.post(post_id),
        arcs_id int REFERENCES instagram.archive(arcs_id),
        date_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);




-- TABLE POST TAG
DROP TABLE IF EXISTS instagram.post_tag;
 
CREATE TABLE instagram.post_tag(
        post_id int REFERENCES instagram.post(post_id),
        tag_id int REFERENCES instagram.tags(tag_id)
);


-- TABLE POST HASHTAGS
DROP TABLE IF EXISTS instagram.post_hashtag;


CREATE TABLE instagram.post_hashtag(
        post_id int REFERENCES instagram.post(post_id),
        hashtag_id int REFERENCES instagram.hashtags(hashtag_id)
);


-- TABLE STORY TAG
DROP TABLE IF EXISTS instagram.story_tag;
 
CREATE TABLE instagram.story_tag(
        story_id int REFERENCES instagram.story(story_id),
        tag_id int REFERENCES instagram.tags(tag_id)
);


-- TABLE STORY HASHTAG
DROP TABLE IF EXISTS instagram.story_hashtag;


CREATE TABLE instagram.story_hashtag(
        story_id int REFERENCES instagram.story(story_id),
        hashtag_id int REFERENCES instagram.hashtags(hashtag_id)
);